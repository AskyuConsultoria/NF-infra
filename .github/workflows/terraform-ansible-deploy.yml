name: Terraform + Ansible Deploy + Inventory S3

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      AWS_DEFAULT_REGION: us-east-1
      TF_VAR_aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
      TF_VAR_aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      TF_VAR_aws_session_token: ${{ secrets.AWS_SESSION_TOKEN }}
      TF_VAR_pbkey_ges_pub: ${{ secrets.PBKEY_GES_PUB }}
      TF_VAR_pvkey_ges_pub: ${{ secrets.PVKEY_GES_PUB }}
      TF_VAR_pbkey_jupyter_pub: ${{ secrets.PBKEY_JUPYTER_PUB }}

    steps:
      # 1️⃣ Checkout
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2️⃣ Setup Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.5

      # 3️⃣ Install dependencies: Ansible, AWS CLI, boto3
      - name: Install Ansible & dependencies
        run: |
          sudo apt-get update -y
          sudo apt-get install -y python3-pip jq unzip sshpass
          pip3 install --upgrade pip
          pip3 install ansible awscli boto3 botocore
          ansible-galaxy collection install community.docker
          aws --version
          ansible --version

      # 4️⃣ Terraform Init
      - name: Terraform Init
        run: terraform init

      # 5️⃣ Terraform Apply
      - name: Terraform Apply
        run: |
          terraform apply -var-file="envs/dev.tfvars" \
            -var "aws_access_key_id=${{ secrets.AWS_ACCESS_KEY_ID }}" \
            -var "aws_secret_access_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}" \
            -var "aws_session_token=${{ secrets.AWS_SESSION_TOKEN }}" \
            -var "pbkey_ges_pub=${{ secrets.PBKEY_GES_PUB }}" \
            -var "pvkey_ges_pub=${{ secrets.PVKEY_PUB }}" \
            -var "pbkey_jupyter_pub=${{ secrets.PBKEY_JUPYTER_PUB }}" \
            -auto-approve

      # 6️⃣ Capture Terraform outputs
      - name: Get Terraform Outputs
        id: tf_outputs
        run: |
          PUBLIC_IP=($(terraform output -json bastion_public_ip | jq -r '.[0][]'))
          PRIVATE_IP=($(terraform output -json private_instance_ip | jq -r '.[0][]'))
          DB_IP=$(terraform output -raw db_instance_ip)
          RAW_UNS_BUCKET_NAME=$(terraform output -raw unstructured-bucket-name)

          echo "PUBLIC_IP=${PUBLIC_IP[@]}" >> $GITHUB_ENV
          echo "PRIVATE_IP=${PRIVATE_IP[@]}" >> $GITHUB_ENV
          echo "DB_IP=$DB_IP" >> $GITHUB_ENV
          echo "RAW_UNS_BUCKET_NAME=$RAW_UNS_BUCKET_NAME" >> $GITHUB_ENV

      # 7️⃣ Add SSH fingerprints
      - name: Add SSH Known Hosts
        run: |
          mkdir -p ~/.ssh
          for ip in $PUBLIC_IP; do
            ssh-keyscan -H "$ip" >> ~/.ssh/known_hosts
          done

      # 8️⃣ Upload inventory.ini to S3
      - name: Upload inventory.ini to S3
        run: |
          aws s3 cp inventory.ini s3://$RAW_UNS_BUCKET_NAME/inventory.ini
          echo "https://$RAW_UNS_BUCKET_NAME.s3.amazonaws.com/inventory.ini" > inventory_url.txt

      # 9️⃣ Upload inventory URL artifact
      - name: Upload inventory URL artifact
        uses: actions/upload-artifact@v4
        with:
          name: inventory-url
          path: inventory_url.txt

      # 🔟 Run Ansible Playbooks
      - name: Run Ansible Playbooks
        run: |
          ansible-playbook -i inventory.ini deploy-config.yaml
          ansible-playbook -i inventory.ini deploy-bd.yaml
          ansible-playbook -i inventory.ini deploy-backend.yaml
          ansible-playbook -i inventory.ini deploy-frontend.yaml

      # 1️⃣1️⃣ Summary
      - name: Summary
        run: |
          echo "✅ Infraestrutura criada com sucesso!"
          echo "🌐 IP Público: $PUBLIC_IP"
          echo "🔒 IP Privado: $PRIVATE_IP"
          echo "🪣 Bucket RAW: $RAW_UNS_BUCKET_NAME"
          echo "🔗 Inventory URL: https://$RAW_UNS_BUCKET_NAME.s3.amazonaws.com/inventory.ini"
